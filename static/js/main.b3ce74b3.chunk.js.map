{"version":3,"sources":["redux/reducers/posts.js","redux/rootReducer.js","redux/actions/actionTypes.js","api.js","components/Post.js","components/App.js","redux/actions/posts.js","index.js"],"names":["initialState","posts","combineReducers","state","action","type","payload","api","hostname","this","response","ok","json","console","error","status","Promise","reject","statusText","message","fetch","headers","then","_handleResponse","catch","_handleError","process","Post","id","title","body","className","connect","dispatch","onFetchPosts","getPosts","setPosts","useEffect","map","post","key","store","createStore","rootReducer","applyMiddleware","next","result","log","getState","reduxThunk","ReactDOM","render","document","querySelector"],"mappings":"4RAEMA,EAAe,CACnBC,MAAO,ICAMC,kBAAgB,CAC7BD,MDEa,WAA+C,IAA/BE,EAA8B,uDAAtBH,EAAcI,EAAQ,uCAC3D,OAAQA,EAAOC,MACb,IERqB,YFSnB,MAAO,CAAEJ,MAAOG,EAAOE,SACzB,QACE,OAAOH,M,gBGqBEI,EAFH,I,WAzBV,cAA4B,IAAbC,EAAY,EAAZA,SAAY,oBACzBC,KAAKD,SAAWA,E,4DAGDE,GACf,OAAIA,EAASC,GACJD,EAASE,QAEhBC,QAAQC,MAAMJ,EAASK,QAChBC,QAAQC,OAAOP,EAASQ,e,mCAIrBJ,GAEZ,OADAD,QAAQC,MAAMA,GACPE,QAAQC,OAAOH,EAAMK,W,iCAI5B,OAAOC,MAAM,GAAD,OAAIX,KAAKD,SAAT,UAA2B,CAAEa,QAAS,KAC/CC,KAAKb,KAAKc,iBACVC,MAAMf,KAAKgB,kB,KAIN,CA9BM,CAChBjB,SAAUkB,yCCiBGC,MAff,YAAqC,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,KAC1B,OACE,6BAASC,UAAU,QACjB,wBAAIA,UAAU,eAAeH,EAA7B,KAAmCC,GACnC,uBAAGE,UAAU,cAAcD,KCuClBE,mBAjBf,SAA0B7B,GACxB,MAAO,CACLF,MAAOE,EAAMF,MAAMA,UAIvB,SAA6BgC,GAC3B,MAAO,CACLC,aAAc,kBAAMD,GC1Bf,SAACA,GACN1B,EAAI4B,WACDb,MAAK,SAACrB,GAAD,OAAWgC,EAVhB,SAAmBhC,GACxB,MAAO,CACLI,KJLqB,YIMrBC,QAASL,GAOmBmC,CAASnC,cDiC1B+B,EAxCf,YAAwC,IAAxB/B,EAAuB,EAAvBA,MAAOiC,EAAgB,EAAhBA,aAKrB,OAJAG,qBAAU,WACRH,MACC,CAACA,IAGF,oCAEIjC,EAAMqC,KAAI,SAACC,GACT,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAKX,GACVA,GAAIW,EAAKX,GACTC,MAAOU,EAAKV,MACZC,KAAMS,EAAKT,cELnBW,G,MAAQC,YAAYC,EAAaC,aANd,SAACH,GAAD,OAAW,SAACI,GAAD,OAAU,SAACzC,GAC7C,IAAM0C,EAASD,EAAKzC,GAEpB,OADAS,QAAQkC,IAAI,aAAc3C,EAAQqC,EAAMO,YACjCF,MAKPG,OAGFC,IAASC,OACP,kBAAC,IAAD,CAAUV,MAAOA,GACf,kBAAC,EAAD,OAEFW,SAASC,cAAc,W","file":"static/js/main.b3ce74b3.chunk.js","sourcesContent":["import { SET_POSTS } from '../actions/actionTypes.js'\n\nconst initialState = {\n  posts: []\n}\n\nexport default function posts (state = initialState, action) {\n  switch (action.type) {\n    case SET_POSTS:\n      return { posts: action.payload }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport posts from './reducers/posts.js'\n\nexport default combineReducers({\n  posts\n})\n","export const SET_POSTS = 'SET_POSTS'\n","const configApi = {\n  hostname: process.env.REACT_APP_APISERVER\n}\n\nclass Api {\n  constructor ({ hostname }) {\n    this.hostname = hostname\n  }\n\n  _handleResponse (response) {\n    if (response.ok) {\n      return response.json()\n    } else {\n      console.error(response.status)\n      return Promise.reject(response.statusText)\n    }\n  }\n\n  _handleError (error) {\n    console.error(error)\n    return Promise.reject(error.message)\n  }\n\n  getPosts () {\n    return fetch(`${this.hostname}/posts`, { headers: {} })\n      .then(this._handleResponse)\n      .catch(this._handleError)\n  }\n}\n\nconst api = new Api(configApi)\n\nexport default api\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction Post ({ id, title, body }) {\n  return (\n    <article className=\"post\">\n      <h2 className=\"post__title\">{id}. {title}</h2>\n      <p className=\"post__text\">{body}</p>\n    </article>\n  )\n}\n\nPost.propTypes = {\n  id: PropTypes.number,\n  title: PropTypes.string,\n  body: PropTypes.string\n}\n\nexport default Post\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { fetchPosts } from '../redux/actions/posts.js'\nimport Post from './Post.js'\n\nfunction App ({ posts, onFetchPosts }) {\n  useEffect(() => {\n    onFetchPosts()\n  }, [onFetchPosts])\n\n  return (\n    <>\n      {\n        posts.map((post) => {\n          return (\n            <Post\n              key={post.id}\n              id={post.id}\n              title={post.title}\n              body={post.body}\n            />\n          )\n        })\n      }\n    </>\n  )\n}\n\nfunction mapStateToProps (state) {\n  return {\n    posts: state.posts.posts\n  }\n}\n\nfunction mapDispatchToProps (dispatch) {\n  return {\n    onFetchPosts: () => dispatch(fetchPosts())\n  }\n}\n\nApp.propTypes = {\n  posts: PropTypes.array,\n  onFetchPosts: PropTypes.func\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import api from '../../api.js'\nimport { SET_POSTS } from './actionTypes.js'\n\nexport function setPosts (posts) {\n  return {\n    type: SET_POSTS,\n    payload: posts\n  }\n}\n\nexport function fetchPosts () {\n  return (dispatch) => {\n    api.getPosts()\n      .then((posts) => dispatch(setPosts(posts)))\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport reduxThunk from 'redux-thunk'\nimport rootReducer from './redux/rootReducer.js'\nimport App from './components/App.js'\nimport './index.css'\n\nconst loggerMiddleware = (store) => (next) => (action) => {\n  const result = next(action)\n  console.log('Middleware', action, store.getState())\n  return result\n}\n\nconst store = createStore(rootReducer, applyMiddleware(\n  loggerMiddleware,\n  reduxThunk\n))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('.app')\n)\n"],"sourceRoot":""}